<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>platform security on Pentester, wtf!?</title><link>/tags/platform-security/</link><description>Recent content in platform security on Pentester, wtf!?</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 03 Feb 2019 12:30:00 +0000</lastBuildDate><atom:link href="/tags/platform-security/index.xml" rel="self" type="application/rss+xml"/><item><title>Dumping memory using SMM</title><link>/blog/dumping-mem-via-smm/</link><pubDate>Sun, 03 Feb 2019 12:30:00 +0000</pubDate><guid>/blog/dumping-mem-via-smm/</guid><description>Following up on SMM:
It&amp;rsquo;s a good place for persistence Turns out it&amp;rsquo;s also a good place for dumping memory! You&amp;rsquo;ve got access to all memory (The paper says only 4GB, unsure why they didn&amp;rsquo;t swap to long mode?) Added bonus: CPU isn&amp;rsquo;t executing other code, so nothing is going to change while you&amp;rsquo;re reading it No idea where this went - The author didn&amp;rsquo;t seem to publish anything further on the matter (https://www.</description></item><item><title>Sitting in hardware</title><link>/blog/hardware-backdoors/</link><pubDate>Sat, 02 Feb 2019 12:30:00 +0000</pubDate><guid>/blog/hardware-backdoors/</guid><description>A tl;dr summary on System Management Mode (SMM), light covering hardware backdoors. Check out www.c7zero.info
This all started with a blog post on building a reliable SMM backdoor, but went into a rabbit hole. These were my notes when reading into it.
My understanding of sitting in SMM is:
System Management Mode (SMM) &amp;ldquo;pauses&amp;rdquo; the OS, then runs its own code Pause - Comes as a &amp;lsquo;System Management Interrupt (SMI)&amp;rsquo;, highest priority, can&amp;rsquo;t be masked Copied into memory at power-on(DXE phase?</description></item></channel></rss>