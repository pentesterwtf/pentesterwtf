<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>windows on Pentester, wtf!?</title><link>/tags/windows/</link><description>Recent content in windows on Pentester, wtf!?</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Feb 2021 18:30:00 +1000</lastBuildDate><atom:link href="/tags/windows/index.xml" rel="self" type="application/rss+xml"/><item><title>Being cheap with Github Actions</title><link>/blog/2021-02-being-cheap/</link><pubDate>Mon, 08 Feb 2021 18:30:00 +1000</pubDate><guid>/blog/2021-02-being-cheap/</guid><description>tl;dr Don&amp;rsquo;t bother fiddling with GitHub actions for Free packer builds with KVM
Less tl;dr Noticed github actions are free*
https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration They need to take less than 6 hours per job, and 72 hours for the entire workflow Tried to port https://github.com/pentesterwtf/packer-kali and https://github.com/pentesterwtf/packer-windows to pure github actions
Github action runners don&amp;rsquo;t have virtualisation support Tried it with TCG instead of KVM to avoid needing virtualisation Results were as follows:</description></item><item><title>AD - Account Lockout vs Disabled</title><link>/blog/2019-10-17-lockout-vs-disabled/</link><pubDate>Thu, 17 Oct 2019 20:30:00 +1000</pubDate><guid>/blog/2019-10-17-lockout-vs-disabled/</guid><description>tl;dr - Disabling an account in AD will replicate normally, which can give an attacker quite a bit of time :)
What Account lockout vs Disabled account Disabling an account sets a flag in the userAccountControl This attribute is handled via normal replication Locking an account out is when an accounts BadLogonCount exceeds some threshold ( Lockout-Threshold ) This sets the lockoutTime and Lockout-Duration attributes on an account, and then is handled by immediate replication instead of &amp;ldquo;normal&amp;rdquo; replication Edge case - this also gets compared against LastBadPasswordAttempt Also useful to note, this attribute isn&amp;rsquo;t replicated :) &amp;lsquo;Normal&amp;rsquo; replication, how fast is that?</description></item><item><title>Jumpboxes are not a mitigation for credential theft</title><link>/blog/ms-win10-credential-theft-mitigation/</link><pubDate>Mon, 05 Aug 2019 19:00:00 +1000</pubDate><guid>/blog/ms-win10-credential-theft-mitigation/</guid><description>tl;dr Microsoft said it themselves, Jumpservers aren&amp;rsquo;t a mitigation for credential theft
What From Microsoft, Windows 10 Credential Theft Mitigation Guide: https://download.microsoft.com/download/C/1/4/C14579CA-E564-4743-8B51-61C0882662AC/Windows%2010%20credential%20theft%20mitigation%20guide.docx
Assume breach: two words that should change the way defenders think about compromise in their organization. Microsoft investigations of attacks on customers all too often reveal success in compromising user and administrator account credentials, including domain and &amp;gt;enterprise administrator credentials. Technical features and capabilities alone are not enough: the most effective solution requires a planned approach as part of a &amp;gt;comprehensive security architecture that includes proper system administration and operation.</description></item><item><title>M$ - AlwaysOn VPN first thoughts</title><link>/blog/ms-alwayson-threatmodels/</link><pubDate>Fri, 26 Jul 2019 19:15:00 +1000</pubDate><guid>/blog/ms-alwayson-threatmodels/</guid><description>tl;dr Microsofts' AlwaysOn VPN, thoughts on how it might work, lazy threat modelling
What AlwaysOn, from https://docs.microsoft.com/en-us/windows-server/remote/remote-access/vpn/always-on-vpn/deploy/always-on-vpn-deploy:
Always On VPN provides a single, cohesive solution for remote access and supports domain-joined, nondomain-joined (workgroup), or Azure AD–joined devices, even &amp;gt;personally owned devices. With Always On VPN, the connection type does not have to be exclusively user or device but can be a combination of both. For example, you &amp;gt;could enable device authentication for remote device management, and then enable user authentication for connectivity to internal company sites and services.</description></item><item><title>Shitty sysadmins - Applocker</title><link>/blog/ms-applocker-defenceindepth/</link><pubDate>Thu, 25 Jul 2019 19:15:00 +1000</pubDate><guid>/blog/ms-applocker-defenceindepth/</guid><description>tl;dr Applocker - don&amp;rsquo;t rely on it, and it may as well be DEP, or UAC.
What From https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria:
Defense-in-depth security features
In some cases, a security feature may provide protection against a threat without being able to provide a robust defense. These security features are typically &amp;gt;referred to as defense-in-depth features or mitigations because they provide additional security but may have by design limitations that prevent them from fully &amp;gt;mitigating a threat.</description></item><item><title>Shitty sysadmins - MS14-025</title><link>/blog/ms14-025/</link><pubDate>Wed, 24 Jul 2019 19:15:47 +1000</pubDate><guid>/blog/ms14-025/</guid><description>tl;dr findstr /S /I cpassword \\lol.domain\SYSVOL\lol.domain\Policies\ What Group policy does a bunch of stuff, some of this stuff needs credentials These credentials would end up in a cpassword attribute Everyone realised this was a bad idea in 2014 The ability to do things this was removed in 2014 When you see these things in 2019, it&amp;rsquo;s because something old is still there (and it&amp;rsquo;s probably been abused by some other attacker too).</description></item><item><title>Password Audit and Control Guidance - Active Directory</title><link>/blog/proposal-windows-ad-passwords/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +1000</pubDate><guid>/blog/proposal-windows-ad-passwords/</guid><description>Tldr Password filters
Less tl;dr I keep finding loads of password reuse in target environments. This is particularly common in users that keep low and high privileged accounts, and the practice generally results in trivial privilege escalation within the environment. This practice provides an “easy win” for an attacker, and serves to undermine an organisation’s security programme and the effectiveness of its defence-in-depth controls. I think the following could help solve the problem, or at least work towards making it significantly less bad (Although you only need one win as an attacker for password reuse).</description></item><item><title>Sysmon configuation</title><link>/blog/sysmon-config/</link><pubDate>Sat, 01 Jun 2019 12:30:47 +1000</pubDate><guid>/blog/sysmon-config/</guid><description>Tldr Seriously just use https://github.com/SwiftOnSecurity/sysmon-config
Less tl;dr https://github.com/SwiftOnSecurity/sysmon-config WEF is going to save you a lot of money/effort Sticking things into (H)ELK is going to be better than some other generic shitty SIEM You should have hardened your machines</description></item></channel></rss>