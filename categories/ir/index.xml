<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IR on Pentester, wtf!?</title><link>/categories/ir/</link><description>Recent content in IR on Pentester, wtf!?</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 31 Aug 2019 14:00:00 +1000</lastBuildDate><atom:link href="/categories/ir/index.xml" rel="self" type="application/rss+xml"/><item><title>On the viability of memory forensics in compromised environments</title><link>/blog/2019-08-31-memory-forensics-viability/</link><pubDate>Sat, 31 Aug 2019 14:00:00 +1000</pubDate><guid>/blog/2019-08-31-memory-forensics-viability/</guid><description>Viability of Memory Forensics A pretty cool paper was written up in 2015 regarding the viability of memory forensics in compromised environments - aptly titled: On the Viability of Memory Forensics in Compromised Environments. You can find the paper at https://pdfs.semanticscholar.org/6d26/be83b674231a301e7bed762895f14e613f66.pdf
Fundamentally, this comes down to can you trust an owned box - I put forward that you probably can under some circumstances, and not at all when an attacker is competent.</description></item><item><title>DMA attacks with the PCIscreamer</title><link>/blog/dma-attack-pentester/</link><pubDate>Mon, 12 Aug 2019 00:20:00 +1000</pubDate><guid>/blog/dma-attack-pentester/</guid><description>Tl;dr Go buy a PCIescreamer and get easy local privesc, and with the lack of LAPS/decent auth in lots of environments, you too can break the &amp;lsquo;Enterprise Network(TM)&amp;rsquo;.
Less tl;dr Thanks to the hard work of guys like Joe Fitzpatrick and Ulf Frisk, DMA attacks against most general purpose computers are now a thing even Pentesters can do.
I&amp;rsquo;ve been able to use the device sucessfully in a few engagements and it&amp;rsquo;s worked out pretty well, to the point where if you&amp;rsquo;re not considering it as part of your threat model (i.</description></item><item><title>Sysmon configuation</title><link>/blog/sysmon-config/</link><pubDate>Sat, 01 Jun 2019 12:30:47 +1000</pubDate><guid>/blog/sysmon-config/</guid><description>Tldr Seriously just use https://github.com/SwiftOnSecurity/sysmon-config
Less tl;dr https://github.com/SwiftOnSecurity/sysmon-config WEF is going to save you a lot of money/effort Sticking things into (H)ELK is going to be better than some other generic shitty SIEM You should have hardened your machines</description></item><item><title>Dumping memory using SMM</title><link>/blog/dumping-mem-via-smm/</link><pubDate>Sun, 03 Feb 2019 12:30:00 +0000</pubDate><guid>/blog/dumping-mem-via-smm/</guid><description>Following up on SMM:
It&amp;rsquo;s a good place for persistence Turns out it&amp;rsquo;s also a good place for dumping memory! You&amp;rsquo;ve got access to all memory (The paper says only 4GB, unsure why they didn&amp;rsquo;t swap to long mode?) Added bonus: CPU isn&amp;rsquo;t executing other code, so nothing is going to change while you&amp;rsquo;re reading it No idea where this went - The author didn&amp;rsquo;t seem to publish anything further on the matter (https://www.</description></item><item><title>Sitting in hardware</title><link>/blog/hardware-backdoors/</link><pubDate>Sat, 02 Feb 2019 12:30:00 +0000</pubDate><guid>/blog/hardware-backdoors/</guid><description>A tl;dr summary on System Management Mode (SMM), light covering hardware backdoors. Check out www.c7zero.info
This all started with a blog post on building a reliable SMM backdoor, but went into a rabbit hole. These were my notes when reading into it.
My understanding of sitting in SMM is:
System Management Mode (SMM) &amp;ldquo;pauses&amp;rdquo; the OS, then runs its own code Pause - Comes as a &amp;lsquo;System Management Interrupt (SMI)&amp;rsquo;, highest priority, can&amp;rsquo;t be masked Copied into memory at power-on(DXE phase?</description></item></channel></rss>